<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/pe/DeployedVarsType" xmlns:txt="java://common.tui.CommonUtilities" xmlns:pfx="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/Schemas/RabbitMQMessages/MessageSchema.xsd" xmlns:ns2="http://www.tibco.com/namespaces/tnt/plugins/json" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:ns4="http://www.tibco.com/namespaces/tnt/plugins/file" xmlns:ns3="http://schemas.tibco.com/bw/plugins/http/5.0/httpExceptions" xmlns:pfx5="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/Schemas/RabbitMQMessageSchemas/APCSchema.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx4="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/Schemas/APCSchema.xsd" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx3="urn:tuinordic:schemas:product:accommodation" xmlns:pfx2="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema">
    <xsd:import namespace="urn:tuinordic:schemas:product:accommodation"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/Schemas/RabbitMQMessages/MessageSchema.xsd" schemaLocation="/SharedResources/Schemas/MessageSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/Schemas/APCSchema.xsd" schemaLocation="/SharedResources/Schemas/APCSchema.xsd"/>
    <xsd:import namespace="urn:tuinordic:schemas:product:accommodation" schemaLocation="/SharedResources/Schemas/UtilitySchemas/APC-Payload.v1.5.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/Schemas/RabbitMQMessageSchemas/APCSchema.xsd" schemaLocation="/SharedResources/Schemas/RabbitMQMessageSchemas/APCSchema.xsd"/>
    <pd:name>Re-Push/RestMethodBindings/APC.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Inputs">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="traceQueueName" type="xsd:string"/>
                    <xsd:element name="mainQueueName" type="xsd:string"/>
                    <xsd:element name="products" type="xsd:string"/>
                    <xsd:element name="FromEnv" type="xsd:string"/>
                    <xsd:element name="ToEnv" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>176</pd:startX>
    <pd:startY>26</pd:startY>
    <pd:returnBindings>
        <output>
            <xsl:choose>
                <xsl:when test="not((upper-case($Start/Inputs/FromEnv)='TEST'&#xA;or&#xA;upper-case($Start/Inputs/FromEnv)='UAT'&#xA;or&#xA;upper-case($Start/Inputs/FromEnv)='PROD')&#xA;and&#xA;(upper-case($Start/Inputs/ToEnv)='TEST'&#xA;or&#xA;upper-case($Start/Inputs/ToEnv)='UAT'&#xA;or&#xA;upper-case($Start/Inputs/ToEnv)='PROD'))">
                    <response>
                        <xsl:value-of select="'Environment Should be one of TEST, UAT or PROD'"/>
                    </response>
                </xsl:when>
                <xsl:when test="string-length($SendMessages/root/response)>0">
                    <response>
                        <xsl:value-of select="$SendMessages/root/response"/>
                    </response>
                </xsl:when>
                <xsl:when test="$GetMessages/response/status='FAILURE'">
                    <response>
                        <xsl:value-of select="$GetMessages/response/responseString"/>
                    </response>
                </xsl:when>
                <xsl:when test="exists($_error/ns1:ErrorReport/StackTrace)">
                    <response>
                        <xsl:value-of select="$_error/ns1:ErrorReport/StackTrace"/>
                    </response>
                </xsl:when>
                <xsl:when test="$GetMessages/response/status='SUCCESS' and count($allmessages/AccumulatedOutput/root/Messages)=0">
                    <response>
                        <xsl:value-of select="'Messages corresponding to mentioned products does not exist in the mentioned trace queue'"/>
                    </response>
                </xsl:when>
                <xsl:otherwise>
                    <response>
                        <xsl:value-of select="'Some error occurred. Please contact admin'"/>
                    </response>
                </xsl:otherwise>
            </xsl:choose>
        </output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="response" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>174</pd:endX>
    <pd:endY>197</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1470996082947</pd:targetNamespace>
    <pd:group name="SendingMessage">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>23</pd:x>
        <pd:y>275</pd:y>
        <pd:width>302</pd:width>
        <pd:height>135</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$allmessages/AccumulatedOutput/root/Messages</pd:over>
            <pd:iterationElementSlot>message</pd:iterationElementSlot>
            <pd:indexSlot>idx</pd:indexSlot>
            <pd:activityOutputName/>
            <pd:accumulateOutput>false</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>Render JSON</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>SendMessages</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Render JSON</pd:from>
            <pd:to>SendMessages</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="Render JSON">
            <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
            <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
            <pd:x>102</pd:x>
            <pd:y>344</pd:y>
            <config>
                <SchemaType>xsdType</SchemaType>
                <BadgerfishCheck>false</BadgerfishCheck>
                <removeRootElementForInput>true</removeRootElementForInput>
                <ActivityInputEditor>
                    <xsd:element name="Message">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element ref="pfx5:properties"/>
                                <xsd:element name="routing_key" type="xsd:string"/>
                                <xsd:element name="payload" type="xsd:string"/>
                                <xsd:element name="payload_encoding" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </ActivityInputEditor>
            </config>
            <pd:inputBindings>
                <ns2:ActivityInputClass>
                    <Message>
                        <xsl:copy-of select="$message/Messages/ancestor-or-self::*/namespace::node()"/>
                        <xsl:copy-of select="$message/Messages/@*"/>
                        <xsl:copy-of select="$message/Messages/node()"/>
                    </Message>
                </ns2:ActivityInputClass>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="SendMessages">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>225</pd:x>
            <pd:y>345</pd:y>
            <config>
                <processName>/Re-Push/CommonProcesses/SendMessages.process</processName>
            </config>
            <pd:inputBindings>
                <Inputs>
                    <RequestURI>
                        <xsl:value-of select="concat('/api/exchanges/',$_globalVariables/ns:GlobalVariables/Services/HubRabbitMQ/VirtualHost,'/',$ParseMessage/ns2:ActivityOutputClass/Messages/Messages[1]/exchange,'/publish')"/>
                    </RequestURI>
                    <PostData>
                        <xsl:value-of select="$Render-JSON/ns2:ActivityOutputClass/jsonString"/>
                    </PostData>
                    <Env>
                        <xsl:value-of select="$Start/Inputs/ToEnv"/>
                    </Env>
                </Inputs>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:group name="MappingMessages">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>891</pd:x>
        <pd:y>280</pd:y>
        <pd:width>166</pd:width>
        <pd:height>122</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$tokenizeProducts/root/products</pd:over>
            <pd:iterationElementSlot>product</pd:iterationElementSlot>
            <pd:indexSlot>ind</pd:indexSlot>
            <pd:outSlot>allmessages</pd:outSlot>
            <pd:activityOutputName>MapReqdMsgs</pd:activityOutputName>
            <pd:accumulateOutput>true</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>MapReqdMsgs</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>MapReqdMsgs</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="MapReqdMsgs">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>963</pd:x>
            <pd:y>346</pd:y>
            <config>
                <element>
                    <xsd:element name="root">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Messages" minOccurs="0" maxOccurs="unbounded">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element ref="pfx5:properties"/>
                                            <xsd:element name="routing_key" type="xsd:string"/>
                                            <xsd:element name="payload" type="xsd:string"/>
                                            <xsd:element name="payload_encoding" type="xsd:string"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </element>
            </config>
            <pd:inputBindings>
                <root>
                    <xsl:for-each select="if(contains($product/products,'PC-'))&#xA;then $allmessagescorrected/AccumulatedOutput/Messages[properties/message_id=$product/products]&#xA;else&#xA;$allmessagescorrected/AccumulatedOutput/Messages">
                        <Messages>
                            <xsl:for-each select="properties">
                                <properties>
                                    <xsl:if test="message_id">
                                        <message_id>
                                            <xsl:value-of select="message_id"/>
                                        </message_id>
                                    </xsl:if>
                                    <xsl:if test="delivery_mode">
                                        <delivery_mode>
                                            <xsl:value-of select="delivery_mode"/>
                                        </delivery_mode>
                                    </xsl:if>
                                    <xsl:for-each select="headers">
                                        <headers>
                                            <xsl:if test="Master">
                                                <Master>
                                                    <xsl:value-of select="Master"/>
                                                </Master>
                                            </xsl:if>
                                            <xsl:if test="State">
                                                <State>
                                                    <xsl:value-of select="State"/>
                                                </State>
                                            </xsl:if>
                                            <xsl:if test="TransactionKey">
                                                <TransactionKey>
                                                    <xsl:value-of select="TransactionKey"/>
                                                </TransactionKey>
                                            </xsl:if>
                                            <xsl:if test="Type">
                                                <Type>
                                                    <xsl:value-of select="Type"/>
                                                </Type>
                                            </xsl:if>
                                            <xsl:for-each select="x-received-from">
                                                <x-received-from>
                                                    <xsl:if test="uri">
                                                        <uri>
                                                            <xsl:value-of select="uri"/>
                                                        </uri>
                                                    </xsl:if>
                                                    <xsl:if test="exchange">
                                                        <exchange>
                                                            <xsl:value-of select="exchange"/>
                                                        </exchange>
                                                    </xsl:if>
                                                    <xsl:if test="redelivered">
                                                        <redelivered>
                                                            <xsl:value-of select="redelivered"/>
                                                        </redelivered>
                                                    </xsl:if>
                                                    <xsl:if test="cluster-name">
                                                        <cluster-name>
                                                            <xsl:value-of select="cluster-name"/>
                                                        </cluster-name>
                                                    </xsl:if>
                                                </x-received-from>
                                            </xsl:for-each>
                                        </headers>
                                    </xsl:for-each>
                                    <xsl:if test="content_encoding">
                                        <content_encoding>
                                            <xsl:value-of select="content_encoding"/>
                                        </content_encoding>
                                    </xsl:if>
                                    <xsl:if test="content_type">
                                        <content_type>
                                            <xsl:value-of select="content_type"/>
                                        </content_type>
                                    </xsl:if>
                                </properties>
                            </xsl:for-each>
                            <routing_key>
                                <xsl:value-of select="$Start/Inputs/mainQueueName"/>
                            </routing_key>
                            <payload>
                                <xsl:value-of select="payload"/>
                            </payload>
                            <payload_encoding>
                                <xsl:value-of select="payload_encoding"/>
                            </payload_encoding>
                        </Messages>
                    </xsl:for-each>
                </root>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:group name="ReparingMessage">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>423</pd:x>
        <pd:y>2</pd:y>
        <pd:width>469</pd:width>
        <pd:height>122</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$ParseMessage/ns2:ActivityOutputClass/Messages/Messages</pd:over>
            <pd:iterationElementSlot>m</pd:iterationElementSlot>
            <pd:indexSlot>i</pd:indexSlot>
            <pd:outSlot>allmessagescorrected</pd:outSlot>
            <pd:activityOutputName>MapAttributes</pd:activityOutputName>
            <pd:accumulateOutput>true</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>ShortMessage</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>MapAttributes</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>ShortMessage</pd:from>
            <pd:to>CallAPI</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>CallAPI</pd:from>
            <pd:to>LongMessage</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LongMessage</pd:from>
            <pd:to>MapAttributes</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="ShortMessage">
            <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
            <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
            <pd:x>497</pd:x>
            <pd:y>50</pd:y>
            <config>
                <inputStyle>text</inputStyle>
                <xsdVersion>default</xsdVersion>
                <validateOutput>true</validateOutput>
                <term>
                    <xsd:element name="ApcRef">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="ApcId" type="xsd:string"/>
                                <xsd:element name="State" type="xsd:string"/>
                                <xsd:element name="Link" type="xsd:string"/>
                                <xsd:element name="TransactionId" type="xsd:string"/>
                                <xsd:element name="TimeStamp" type="xsd:string"/>
                                <xsd:element name="SourceSnapshotId" type="xsd:string"/>
                                <xsd:element name="SourceSnapshotCreated" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </term>
            </config>
            <pd:inputBindings>
                <xmlString>
                    <xsl:value-of select="$m/Messages/payload"/>
                </xmlString>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="CallAPI">
            <pd:type>com.tibco.plugin.json.activities.RestActivity</pd:type>
            <pd:resourceType>ae.activities.RestActivity</pd:resourceType>
            <pd:x>587</pd:x>
            <pd:y>50</pd:y>
            <config>
                <restMethodUI>GET</restMethodUI>
                <restResponseType>JSON</restResponseType>
                <authChoiceUI>No Authentication</authChoiceUI>
                <restInputReferNode>
                    <xsd:element name="Parameters">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Query" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="Header" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                                <xsd:element name="Body" minOccurs="0">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="Form" minOccurs="0">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                            <xsd:element name="Text" minOccurs="0">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="type" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content" type="xsd:string" minOccurs="0"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                            <xsd:element name="Binary" minOccurs="0">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="type" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content" type="xsd:base64Binary" minOccurs="0"/>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                            <xsd:element name="Multipart" minOccurs="0" maxOccurs="unbounded">
                                                <xsd:complexType>
                                                    <xsd:sequence>
                                                        <xsd:element name="name" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="filename" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content-type" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content-id" type="xsd:string" minOccurs="0"/>
                                                        <xsd:element name="content" minOccurs="0">
                                                            <xsd:complexType>
                                                                <xsd:choice>
                                                                    <xsd:element name="binary" type="xsd:base64Binary"/>
                                                                    <xsd:element name="text" type="xsd:string"/>
                                                                    <xsd:element name="fileName" type="xsd:string"/>
                                                                </xsd:choice>
                                                            </xsd:complexType>
                                                        </xsd:element>
                                                    </xsd:sequence>
                                                </xsd:complexType>
                                            </xsd:element>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </restInputReferNode>
                <restOutputReferNode>
                    <xsd:element name="header">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Server" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Location" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Allow" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Date" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Set-Cookie" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Pragma" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Content-Type" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Content-Length" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Content-Encoding" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Content-Range" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Last-Modifie" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </restOutputReferNode>
            </config>
            <pd:inputBindings>
                <ns2:ActivityInput>
                    <URI>
                        <xsl:value-of select="txt:replace($ShortMessage/ApcRef/Link,'stospas71','stosaas71')"/>
                    </URI>
                </ns2:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="LongMessage">
            <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
            <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
            <pd:x>705</pd:x>
            <pd:y>50</pd:y>
            <config>
                <inputStyle>text</inputStyle>
                <xsdVersion>default</xsdVersion>
                <validateOutput>true</validateOutput>
                <term ref="pfx3:APC"/>
            </config>
            <pd:inputBindings>
                <xmlString>
                    <xsl:value-of select="$CallAPI/ns2:RESTOutput/msg"/>
                </xmlString>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="MapAttributes">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>818</pd:x>
            <pd:y>50</pd:y>
            <config>
                <element ref="pfx5:Messages"/>
            </config>
            <pd:inputBindings>
                <Messages>
                    <xsl:if test="$m/Messages/payload_bytes">
                        <payload_bytes>
                            <xsl:value-of select="$m/Messages/payload_bytes"/>
                        </payload_bytes>
                    </xsl:if>
                    <xsl:if test="$m/Messages/redelivered">
                        <redelivered>
                            <xsl:value-of select="$m/Messages/redelivered"/>
                        </redelivered>
                    </xsl:if>
                    <xsl:if test="$m/Messages/exchange">
                        <exchange>
                            <xsl:value-of select="$m/Messages/exchange"/>
                        </exchange>
                    </xsl:if>
                    <xsl:if test="$m/Messages/routing_key">
                        <routing_key>
                            <xsl:value-of select="$m/Messages/routing_key"/>
                        </routing_key>
                    </xsl:if>
                    <xsl:if test="$m/Messages/message_count">
                        <message_count>
                            <xsl:value-of select="$m/Messages/message_count"/>
                        </message_count>
                    </xsl:if>
                    <xsl:copy-of select="$m/Messages/properties"/>
                    <payload>
                        <xsl:value-of select="txt:replace(txt:replace($m/Messages/payload, $ShortMessage/ApcRef/SourceSnapshotId, $LongMessage/pfx3:APC/@sourceSnapshotId), $ShortMessage/ApcRef/Link, txt:replace($ShortMessage/ApcRef/Link,'stospas71','stosaas71'))"/>
                    </payload>
                    <xsl:if test="$m/Messages/payload_encoding">
                        <payload_encoding>
                            <xsl:value-of select="$m/Messages/payload_encoding"/>
                        </payload_encoding>
                    </xsl:if>
                </Messages>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>25</pd:x>
        <pd:y>198</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="CreatePostDataGet">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>360</pd:x>
        <pd:y>26</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <removeRootElementForInput>true</removeRootElementForInput>
            <ActivityInputEditor>
                <xsd:element name="postdata">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="count" type="xsd:string"/>
                            <xsd:element name="requeue" type="xsd:boolean"/>
                            <xsd:element name="encoding" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityInputEditor>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInputClass>
                <postdata>
                    <xsl:choose>
                        <xsl:when test="contains($Start/Inputs/products, 'PC-')">
                            <count>
                                <xsl:value-of select="-1"/>
                            </count>
                        </xsl:when>
                        <xsl:otherwise>
                            <count>
                                <xsl:value-of select="$Start/Inputs/products"/>
                            </count>
                        </xsl:otherwise>
                    </xsl:choose>
                    <requeue>
                        <xsl:value-of select="true()"/>
                    </requeue>
                    <encoding>
                        <xsl:value-of select="'auto'"/>
                    </encoding>
                </postdata>
            </ns2:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetMessages">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>363</pd:x>
        <pd:y>195</pd:y>
        <config>
            <processName>/Re-Push/CommonProcesses/GetMessages.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <Environment>
                    <xsl:value-of select="$Start/Inputs/FromEnv"/>
                </Environment>
                <PostData>
                    <xsl:value-of select="$CreatePostDataGet/ns2:ActivityOutputClass/jsonString"/>
                </PostData>
                <RequestURI>
                    <xsl:value-of select="concat('/api/queues/',$_globalVariables/ns:GlobalVariables/Services/HubRabbitMQ/VirtualHost,'/',$Start/Inputs/traceQueueName,'/get')"/>
                </RequestURI>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseMessage">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>653</pd:x>
        <pd:y>195</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
            <ValidateOutputEnable>true</ValidateOutputEnable>
            <ActivityOutputEditor>
                <xsd:element name="Messages">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element ref="pfx5:Messages" minOccurs="0" maxOccurs="unbounded"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </ActivityOutputEditor>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInputClass>
                <jsonString>
                    <xsl:value-of select="concat('{&quot;Messages&quot;:{&quot;Messages&quot;:',$GetMessages/response/responseString,'}}')"/>
                </jsonString>
            </ns2:ActivityInputClass>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="tokenizeProducts">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>972</pd:x>
        <pd:y>72</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="products" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <xsl:variable name="var" select="tib:tokenize($Start/Inputs/products,',')"/>
            <root>
                <xsl:for-each select="$var">
                    <products>
                        <xsl:value-of select="."/>
                    </products>
                </xsl:for-each>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="WriteMessagesToFile">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>593</pd:x>
        <pd:y>279</pd:y>
        <config>
            <processName>/Re-Push/CommonProcesses/WriteMessageToFile.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <Path>
                    <xsl:value-of select="'APC'"/>
                </Path>
                <Content>
                    <xsl:value-of select="tib:render-xml($allmessages)"/>
                </Content>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>CreatePostDataGet</pd:from>
        <pd:to>GetMessages</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SendingMessage</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>CreatePostDataGet</pd:to>
        <pd:xpathDescription>EnvExists</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>(upper-case($Start/Inputs/FromEnv)='TEST'
or
upper-case($Start/Inputs/FromEnv)='UAT'
or
upper-case($Start/Inputs/FromEnv)='PROD')
and
(upper-case($Start/Inputs/ToEnv)='TEST'
or
upper-case($Start/Inputs/ToEnv)='UAT'
or
upper-case($Start/Inputs/ToEnv)='PROD')</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetMessages</pd:from>
        <pd:to>ParseMessage</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetMessages/response/status='SUCCESS'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetMessages</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65485</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MappingMessages</pd:from>
        <pd:to>WriteMessagesToFile</pd:to>
        <pd:xpathDescription>WriteToFile</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$_globalVariables/ns:GlobalVariables/WriteToFile="true"</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>tokenizeProducts</pd:from>
        <pd:to>MappingMessages</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseMessage</pd:from>
        <pd:to>ReparingMessage</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ReparingMessage</pd:from>
        <pd:to>tokenizeProducts</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>WriteMessagesToFile</pd:from>
        <pd:to>SendingMessage</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MappingMessages</pd:from>
        <pd:to>SendingMessage</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>